version: '3'

services:
  #
  backend-host:
    image: backend-host
    restart: always
    build:
      context: backend\\backend-host\\
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "80:8080"
    networks:
      - goldenshoe-network
    #volumes:
    #  - "app:/app"
    depends_on:
        - database
  #
  authenticator-service:
    image: authenticator-service
    restart: always
    build:
      context: backend\\authenticator-service\\
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "9000:9000"
    networks:
      - goldenshoe-network
    #volumes:
    #  - "app:/app"
    depends_on:
        - database
  #
  products-service:
    image: products-service
    restart: always
    build:
      context: backend\\products-service\\
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "9001:9001"
    networks:
      - goldenshoe-network
    #volumes:
    #  - "app:/app"
    depends_on:
        - database
  #
  orders-service:
    image: goldenshoe-orders
    restart: always
    build:
      context: backend\\orders-service\\
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "9002:9002"
    networks:
      - goldenshoe-network
    depends_on:
        - database
  #
  tracking-service:
    image: goldenshoe-tracking
    restart: always
    build:
      context: backend\\tracking-service\\
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "9003:9003"
    networks:
      - goldenshoe-network
    depends_on:
        - database
  #
  database:
    image: mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_DATABASE: "mydatabase"
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    networks:
      - goldenshoe-network
    ports:
      - 3307:3306
  #
#  graphiql:
#    image: npalm/graphiql
#    restart: always
#    environment:
#      API_URL: "http://192.168.99.100:80/graph"
#    networks:
#      - goldenshoe-network
#    ports:
#      - 4000:4000
  #
  adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8080
    networks:
      - goldenshoe-network
  #
  varnish:
    image: varnish
    build:
      context: varnish\\
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8081:80
    networks:
      - goldenshoe-network
  #
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    logging:
      driver: none
  
  kafka:
    image: wurstmeister/kafka:1.0.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_CREATE_TOPICS: "testtopic:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    logging:
      driver: none
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
networks:
  goldenshoe-network:
    driver: bridge

volumes:
  app: ~
